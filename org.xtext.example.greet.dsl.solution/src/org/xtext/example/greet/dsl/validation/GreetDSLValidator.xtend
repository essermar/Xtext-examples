/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.greet.dsl.validation

import org.eclipse.xtext.validation.Check
import org.xtext.example.greet.dsl.greetDSL.GreetDSLPackage
import org.xtext.example.greet.dsl.greetDSL.Greeting
import org.xtext.example.greet.dsl.greetDSL.Model
import org.xtext.example.greet.dsl.greetDSL.Person

import static extension java.lang.Character.isUpperCase

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class GreetDSLValidator extends AbstractGreetDSLValidator {

	public static val INVALID_NAME = 'lowerCaseName'
	public static val PERSON_NEGLECTED = 'personNeglected'

	// CheckType.FAST, CheckType.NORNMAL, CheckType.EXPENSIVE
	@Check
	def checkPersonGreeted(Person person) {
		val model = person.eContainer as Model
		if (!model.greetings.empty) {
			val personGreeted = model.greetings.exists[Greeting greeting|greeting.persons.contains(person)]
			if (!personGreeted) {
				error(
					'''«person.name» was not greeted!'''.toString(),
					GreetDSLPackage.Literals.PERSON__NAME,
					PERSON_NEGLECTED,
					#[]
				)
			}
		}
	}

	@Check
	def checkPersonNameStartsWithCapital(Person person) {
		val isLowerCaseName = !person.name.charAt(0).isUpperCase
		if (isLowerCaseName) {
			warning('Name should start with a capital', GreetDSLPackage.Literals.PERSON__NAME,
				GreetDSLValidator.INVALID_NAME, #[])
		}
	}
}
