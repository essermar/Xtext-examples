/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.greet.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.greet.dsl.greetDSL.Greeting
import org.xtext.example.greet.dsl.greetDSL.Person

import static extension org.apache.commons.lang3.StringEscapeUtils.escapeHtml4
/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GreetDSLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val output = '''
			<!DOCTYPE html>
			<html>
			<head>
				<title>Greetings, Earthlings!</title>
			</head>
			<body>
				<h1>Persons Greeted:</h1>
				<ul>
					«FOR Person person : resource.selectGreetedPersons()»
						<li>«person.name.escapeHtml4()» from «person.homeTown.escapeHtml4()»</li>
					«ENDFOR»
				</ul>
			</body>
			</html>
		'''
		fsa.generateFile('greetings.html', output.toString())
	}

	def private selectGreetedPersons(Resource resource) {
		resource.allContents.filter(Greeting).map[it.persons].toList().flatten().toSet()
	}
}
